AWSTemplateFormatVersion: "2010-09-09"
Description: AWS Lambda - This Lambda finds negative invoices and converts them to be a credit on the user's account so that the amount is discounted off their next positive bill
Parameters:
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - PROD
      - CODE
    Default: CODE
  WaitTimeForZuora:
    Description: How long the step function should wait (in seconds) for Zuora to generate its Export
    Type: Number
    Default: 500

Resources:
  ZuoraCreditorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub zuora-creditor-${Stage}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
               - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - lambda:InvokeFunction
  LambdaKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub Used by the zuora-creditor-${Stage} lambda to encrypt and decrypt its environment variables
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Sub key-policy-zuora-creditor-${Stage}
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Action: kms:*
          Resource: "*"
        - Sid: Allow access for Key Administrators
          Effect: Allow
          Action:
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          Resource: "*"
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS:
              Fn::GetAtt:
              - ZuoraCreditorRole
              - Arn
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: "*"

  LambdaKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/zuora-creditor-kms-${Stage}
      TargetKeyId: !Ref LambdaKMSKey

  ZuoraCreditorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub zuora-creditor-${Stage}
      Code:
        S3Bucket: subscriptions-dist
        S3Key: !Sub subscriptions/${Stage}/zuora-creditor/zuora-creditor.jar
      Description: This Lambda finds negative invoices and converts them to be a credit on the customer's account so that the amount is deducted off their next positive bill.
      Handler: com.gu.zuora.creditor.Lambda::handleRequest
      MemorySize: 512
      Role: !GetAtt ZuoraCreditorRole.Arn
      Runtime: java8
      Timeout: 60
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn

  ZuoraCreditorStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub zuora-creditor-step-function-role-${Stage}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
               - states.eu-west-1.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub zuora-creditor-step-function-policy-${Stage}
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - lambda:InvokeFunction

  ZuoraCreditorStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt ZuoraCreditorStepFunctionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "A state machine to orchestrate the zuora-creditor Lambda, holding state between invocations to allow a background job in Zuora to complete between those invocations.",
          "StartAt": "FirstState",
          "States": {
            "FirstState": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:zuora-creditor-${Stage}",
              "Next": "wait_using_seconds"
            },
            "wait_using_seconds": {
              "Type": "Wait",
              "Seconds": ${WaitTimeForZuora},
              "Next": "FinalState"
            },
            "FinalState": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:zuora-creditor-${Stage}",
              "End": true
            }
          }
        }